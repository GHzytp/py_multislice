import numpy as np, torch, matplotlib.pyplot as plt,sys,re,time

import torch_utils as utils

#Atomic symbol lookup table, for conversion from symbol to atomic number Z
symbol=['','H' , 'He' , 'Li' , 'Be' , 'B'  , 'C'  , 'N ' , 'O'  , 'F' , 'Ne',
           'Na', 'Mg' , 'Al' , 'Si' , 'P'  , 'S'  , 'Cl' , 'Ar' , 'K' , 'Ca',
           'Sc', 'Ti' , 'V'  , 'Cr' , 'Mn' , 'Fe' , 'Co' , 'Ni' , 'Cu', 'Zn',
           'Ga', 'Ge' , 'As' , 'Se' , 'Br' , 'Kr' , 'Rb' , 'Sr' , 'Y' , 'Zr',
           'Nb', 'Mo' , 'Tc' , 'Ru' , 'Rh' , 'Pd' , 'Ag' , 'Cd' , 'In', 'Sn',
           'Sb', 'Te' , 'I'  , 'Xe' , 'Cs' , 'Ba' , 'La' , 'Ce' , 'Pr', 'Nd',
           'Pm', 'Sm' , 'Eu' , 'Gd' , 'Tb' , 'Dy' , 'Ho' , 'Er' , 'Tm', 'Yb',
           'Lu', 'Hf' , 'Ta' , 'W'  , 'Re' , 'Os' , 'Ir' , 'Pt' , 'Au', 'Hg',
           'Tl', 'Pb' , 'Bi' , 'Po' , 'At' , 'Rn' , 'Fr' , 'Ra' , 'Ac', 'Th',
           'Pa', 'U'  , 'Np' , 'Pu' , 'Am' , 'Cm' , 'Bk' , 'Cf' , 'Es', 'Fm',
           'Md', 'No' , 'Lr' , 'Rf' , 'Db' , 'Sg' , 'Bh' , 'Hs' , 'Mt', 'Ds',
           'Rg', 'Uub', 'Uut', 'Uuq', 'Uup', 'Uuh', 'Uus', 'Uuo']

#Scattering factors taken from Lobato, I., & Van Dyck, D. (2014). An accurate
#parameterization for scattering factors, electron densities and electrostatic
#potentials for neutral atoms that obey all physical constraints. Acta
#Crystallographica Section A: Foundations and Advances, 70(6), 636-649.

#The array will be shaped such that ai and bi coefficients of the fit will sit
#along the
e_scattering_factors = np.asarray([
                6.47384848835291790e-03,    2.78519885379148890e+00,        -4.90192576780229040e-01,        2.77620428330644750e+00,        5.73284160390876480e-01,    2.77538591050625130e+00,        -3.79403301483990480e-01,    2.76759302867258810e+00,        5.54426474774079140e-01,    2.76511897642927540e+00,
                3.05745116099835460e+00,    1.08967248726078810e+00,        -6.20044779127325260e+01,        9.39838798143121100e-01,        6.40055537084614490e+01,    9.25289034386265530e-01,        -5.00132578542780590e+00,    8.22947498708650580e-01,        1.51798828700526440e-01,    5.77393110675402220e-01,
                3.92622272886147930e+00,    8.14276013517280360e+00,        -4.54861962639998030e+00,        4.98941077007855770e+00,        2.19335312878658510e+00,    4.14428999239410880e+00,        6.99451265033965710e-02,    4.01922315065680210e-01,        2.09864224851937560e-03,    1.56479034719823580e-01,
                3.39824970557054050e+00,    4.44270178622409520e+00,        -1.90866886095696660e+00,        3.32451542526422950e+00,        3.90702117539227370e-02,    1.89772880348214850e-01,        -1.11631010210714520e-02,    8.71918614644603550e-02,        9.46204465357523140e-03,    8.27809060041340560e-02,
                1.47279248639329290e+00,    3.74974048281819130e+00,        -4.01933042199387140e-01,        5.88066536139673750e-01,        3.05998956982689360e-01,    5.15639613103010990e-01,        1.96144217173168000e-02,    1.21377570080603680e-01,        9.77177106088202540e-04,    6.80982412160313910e-02,
                1.24466088621343300e+02,    2.42120849256005630e+00,        -2.20352857078963780e+02,        2.30537943752425800e+00,        1.95235352280479130e+02,    2.04851932106564230e+00,        -9.81079361269799650e+01,    1.93352552917547380e+00,        1.42023041213623150e-02,    7.68976818478339650e-02,
                5.81327150702556140e+01,    1.70044856413471050e+00,        -1.47542409087812730e+02,        1.55903852601740440e+00,        1.30143065649639450e+02,    1.41576827473146880e+00,        -3.96195674084154280e+01,    1.27841818205455790e+00,        1.05957763331480850e-02,    5.65587798474805540e-02,
                2.99474045242362440e+01,    1.30283987880010680e+00,        -7.76101266255278260e+01,        1.15794105258309530e+00,        9.98817764623144200e+01,    1.00988549338025120e+00,        -5.12127005505673050e+01,    9.43327971433265970e-01,        8.19618954446032010e-03,    4.33197611321825550e-02,
                9.48984894503524750e-01,    1.45882933198645910e+00,        -3.01333923043554930e+01,        6.88779993187680020e-01,        5.27965078127338640e+01,    6.54239869346695650e-01,        -2.27062703795272430e+01,    6.14836130811994290e-01,        6.56997664531440950e-03,    3.42837419495011160e-02,
                5.82741192220907370e-01,    1.28118573143877200e+00,        3.70676561841054910e-01,        4.44520897170477600e-01,        -5.46744967350809240e-01,    1.98650875510481020e-01,        4.14052682480208050e-01,    1.85477246656276460e-01,        5.19903080863993140e-03,    2.75738382033885800e-02,
                2.36700603946792610e+01,    8.45148773514603140e+00,    -2.18531786159742470e+01,    8.04096600474298210e+00,    5.92499448108946390e-01,    6.24996000526314990e-01,    -2.44652290310244000e-02,    1.32450394947296380e-01,    4.83950221706535770e-03,    2.33994362049878630e-02,
                4.85501047687149520e+00,    5.94639273842456450e+00,    -2.66220906476843670e+00,    4.17130312520697900e+00,    4.78001236085108030e-01,    3.98269808150374270e-01,    -7.02307064692064830e-02,    1.61886185837474190e-01,    3.98905828104019820e-03,    1.95345056363103450e-02,
                2.83409561607507500e+00,    6.66235023980533200e+00,    -4.28004133378261020e+00,    5.51294722224021430e-01,    4.42191680548311440e+00,    5.09328963445973780e-01,    -3.45774471896400580e-02,    1.11784837425331210e-01,    3.52385941406079890e-03,    1.67602351805257390e-02,
                2.87189142611612350e+00,    5.08487103642989610e+00,    -2.06173501195173530e+00,    4.29178185305126190e-01,    2.17114024204478720e+00,    3.66485434192162230e-01,    -6.63073633058801900e-02,    1.19710611296903400e-01,    3.01070709670513740e-03,    1.43994536128397540e-02,
                2.79151840023151410e+00,    3.90065961865466140e+00,    -4.36506837823822110e+00,    3.29825968377150000e-01,    4.43558455516699010e+00,    3.06089956505888550e-01,    -8.09635773399473850e-02,    1.08083232545972810e-01,    2.67900017966440440e-03,    1.25894495331186820e-02,
                2.67971415610199460e+00,    3.06889121199971140e+00,    -4.74252822230755160e-01,    3.78216702185809000e-01,    5.14835948989687650e-01,    1.88721811902548830e-01,    -9.58360024990722450e-02,    9.23370590031494100e-02,    2.48871963818935240e-03,    1.11920877241144090e-02,
                2.56624839980020260e+00,    2.41594920365612390e+00,    -3.38876350828591740e-01,    4.21414239310215990e-01,    1.14584558755515010e+00,    1.09592404975830310e-01,    -9.23109316547079620e-01,    9.90955458226752960e-02,    2.29168002041042150e-03,    9.99665948927521040e-03,
                2.45981746414068510e+00,    1.94004631988856560e+00,    -3.64198177076995090e-01,    3.99241067884398780e-01,    2.50584477222474460e-01,    1.17472406274412200e-01,    -5.77437029544345810e-02,    5.67803726023621840e-02,    2.30143866828583670e-03,    9.15579832920707970e-03,
                5.81107878601454790e+00,    1.26691483399036820e+01,    -5.02537096539422590e+01,    3.95641039698166490e+00,    4.88609412059842470e+01,    3.68385059577154510e+00,    7.40628592048382940e-02,    1.07458517569562820e-01,    7.27802738626221870e-04,    6.65576789391501140e-03,
                2.11781161524159530e+01,    6.39608619431736170e+00,    -3.39043824317468880e+02,    3.74024713891749450e+00,    3.22756958523296650e+02,    3.64888449922605270e+00,    6.50077673896996690e-02,    9.45090634514673540e-02,    6.55874366578593520e-04,    5.98520619883758600e-03,
                1.26035186572148630e+01,    6.15625615363852940e+00,    -2.76875382053702590e+02,    3.08873554266679310e+00,    2.68871603907342830e+02,    3.02727663298548320e+00,    5.56824178897458030e-02,    8.18874748375215680e-02,    5.77071255145399560e-04,    5.38289832050797570e-03,
                8.57595775238129930e+00,    6.00780668875581810e+00,    -2.10331563465304870e+02,    2.60285856745213010e+00,    2.06097172601541360e+02,    2.55352345051105620e+00,    4.77773948977261930e-02,    7.11429484024153900e-02,    5.05716484480320570e-04,    4.85628439383726120e-03,
                6.52768433234788950e+00,    5.83552479352448120e+00,    -2.00430576829172650e+02,    2.23255952381127630e+00,    1.98015053889994020e+02,    2.19786018594228990e+00,    4.13911518064005580e-02,    6.23973876828547300e-02,    4.47455024329856520e-04,    4.40383649079958020e-03,
                3.02831784843691310e+00,    8.35911504314631770e+00,    -9.55393933081432320e+01,    1.80263790264103240e+00,    9.61761562352198070e+01,    1.77509488957047210e+00,    3.59777315957987700e-02,    5.48144412143113730e-02,    3.91492890718422320e-04,    3.99828968916034810e-03,
                4.37417550633122690e+00,    5.51031705504928220e+00,    -1.60925510918779510e+02,    1.68798216402433910e+00,    1.60273308060322340e+02,    1.66614047777702390e+00,    3.12303861049162410e-02,    4.83370390321277020e-02,    3.46966021020938010e-04,    3.64746960053068160e-03,
                3.79810090836859620e+00,    5.31712645899433060e+00,    -9.16893549381687190e+01,    1.49713094884748130e+00,    9.14454252155429830e+01,    1.46809241804410510e+00,    2.72754344027604720e-02,    4.27247850128954910e-02,    3.03379854383771030e-04,    3.32791855231874110e-03,
                3.33037874467544270e+00,    5.18135964579543180e+00,    -7.70017596472967090e+01,    1.32915122265139420e+00,    7.70725221790516880e+01,    1.30284928963228920e+00,    2.39904669040569940e-02,    3.80645486826370960e-02,    2.68256665523942030e-04,    3.05010007991570780e-03,
                2.96908078725286370e+00,    5.04180949109380010e+00,    -7.57477069129040220e+01,    1.18275507921629310e+00,    7.60398287625307320e+01,    1.16216545846629930e+00,    2.10162113692966970e-02,    3.37479087883035340e-02,    2.31151751135153040e-04,    2.78680862070740520e-03,
                1.75207145212145600e+00,    6.18750497986187130e+00,    -4.30410523492124500e+01,    1.00266263628976620e+00,    4.40705915543573850e+01,    9.85384311353030280e-01,    1.86876154088144730e-02,    3.02984703916117610e-02,    2.01727324791624140e-04,    2.55855598748879050e-03,
                2.46637110499459130e+00,    4.91028078493815910e+00,    -6.14678541332537450e+01,    9.67898520322992170e-01,    6.20176945237481260e+01,    9.51283834775355500e-01,    1.64160173931416210e-02,    2.69600967667566260e-02,    1.72487117595380870e-04,    2.34109611046253710e-03,
                2.76010203108428340e+00,    6.10128224537662690e+00,    -3.44452614207467890e+01,    7.65143313553464880e-01,    3.52262267244016340e+01,    7.51328623382859660e-01,    1.32067196999419880e-02,    2.24879634317251170e-02,    1.25945560928245720e-04,    2.06737374278712340e-03,
                3.18241635260000020e+00,    5.01719040860914680e+00,    -5.24514037811166670e+01,    7.12395764437798170e-01,    5.29690827162218480e+01,    7.02280192528193960e-01,    1.14096168591864820e-02,    1.96747295694015350e-02,    9.50954358145057910e-05,    1.84146614494011450e-03,
                3.45642969119603950e+00,    4.01358016032945210e+00,    -3.33176044431721220e+01,    6.62355778050629060e-01,    3.35712193855332190e+01,    6.45771941056073830e-01,    9.79002295640342070e-03,    1.70919353231011460e-02,    6.53434862265172480e-05,    1.60301602839420070e-03,
                3.64905047801926410e+00,    3.25043267112593390e+00,    -4.36851662221238610e+01,    6.09666201650288950e-01,    4.36920288601154780e+01,    5.96971300802123240e-01,    8.44902284199144410e-03,    1.48554512740362250e-02,    3.78611474110038160e-05,    1.33625587356563020e-03,
                3.83846312224289490e+00,    2.61189470573232270e+00,    -5.22723471011233870e+01,    5.66195062874718210e-01,    5.19861279495659620e+01,    5.55279326699873900e-01,    7.33955989338044760e-03,    1.29746469432440690e-02,    1.64694207951339920e-05,    1.02986536855875730e-03,
                4.02541030310827440e+00,    2.13648381443739990e+00,    -4.63042332078929770e+01,    5.26591166454131180e-01,    4.57213681904101180e+01,    5.14136784464577560e-01,    6.35337959625315720e-03,    1.12807242242006810e-02,    1.33477845255742950e-06,    4.88089857940970360e-04,
                3.38975351595393980e+00,    2.05744814368171130e+01,    2.14348348679172410e+00,        1.91079945218516370e+00,    3.54322603510978160e-01,    1.97410589396603890e-01,    3.74009340085664200e-03,    8.13459465343988920e-03,    3.00342502342229660e-07,    2.92685791056951060e-04,
                4.77092509299825980e+00,    1.33668881330412750e+01,    1.47597850155283420e+00,        1.33738379577196680e+00,    3.04451355544188670e-01,    1.77532369437782830e-01,    3.59474981916728340e-03,    7.79105033001826780e-03,    3.00085549228278960e-07,    2.82255139648537230e-04,
                4.60721019875234020e+00,    1.08686905557151850e+01,    1.42801851039840270e+00,        1.31137455873124110e+00,    2.95581045577753830e-01,    1.68022870784711150e-01,    3.38997840852895120e-03,    7.35964545350478290e-03,    2.66862974969022400e-07,    2.62343281021387260e-04,
                4.31175453406871600e+00,    9.45896580517490190e+00,    1.49331578039339450e+00,        1.33063622845245620e+00,    2.81236050128884140e-01,    1.56506871444453550e-01,    3.09337738455747140e-03,    6.82410523811735180e-03,    2.58024448512530600e-07,    2.49818879110702270e-04,
                3.11179039113495380e+00,    1.06903141343023660e+01,    2.20259060945803050e+00,        1.65316356158933140e+00,    2.70330774910020890e-01,    1.45115185718969860e-01,    2.68799194751098100e-03,    6.13956351582850470e-03,    2.32549483347779190e-07,    2.32240235937672540e-04,
                2.83105968432053560e+00,    1.04357195758950730e+01,    2.34858137489674460e+00,        1.60482868674597220e+00,    2.45105888429696440e-01,    1.31696934774606920e-01,    2.35282108218515860e-03,    5.54977901383345900e-03,    2.31270838343859220e-07,    2.22747463764897690e-04,
                2.57179859323352570e+00,    1.01643117131377530e+01,    2.45633741957203040e+00,        1.53441919244550480e+00,    2.20658440881371460e-01,    1.19138619754110400e-01,    2.05531418012438150e-03,    5.01853240882988840e-03,    2.32132947793692180e-07,    2.14590379120861160e-04,
                2.33230030353946560e+00,    9.92167460159959450e+00,    2.53578025489049620e+00,        1.45585668808788140e+00,    1.98208042136026000e-01,    1.07682187873349280e-01,    1.76120130460053530e-03,    4.47243545654967340e-03,    1.98129411546024490e-07,    1.96574716232499390e-04,
                2.11352534859470030e+00,    9.65913725859762270e+00,    2.58636316155013770e+00,        1.37106656934329620e+00,    1.77063913863686530e-01,    9.70353027584648780e-02,    1.49737051003056920e-03,    3.97128509088792110e-03,    2.05481445555622420e-07,    1.91355190737798320e-04,
                6.42159796182687260e-01,    5.97479750263406120e+00,    2.97914814426328920e+00,        1.43359432541277740e+00,    1.68154426004270800e-01,    9.09868401172676950e-02,    1.33744213878407760e-03,    3.62410137116162160e-03,    1.91410968246861570e-07,    1.80688914416045000e-04,
                1.55317216680389560e+00,    8.15620235758956550e+00,    2.63930364699988780e+00,        1.21600887481801510e+00,    1.42015486956788170e-01,    7.90098864915873420e-02,    1.00850460099760920e-03,    2.96547901363948970e-03,    1.94638429973024380e-07,    1.74593095919146200e-04,
                6.15307851992860150e+01,    3.11468102533247300e+00,    -7.86016741201582080e+01,    2.76016983388574480e+00,    2.15501292602770460e+01,    1.93551312324722380e+00,    1.37685015664191560e-01,    7.22468347260293160e-02,    3.24644930946521010e-04,    1.17001629624684460e-03,
                4.22232177901524610e+00,    6.07265510403227450e+00,    -2.64121318353202560e+01,    1.64550178959387900e+00,    2.72852852708746920e+01,    1.52257074939506750e+00,    1.21617901884137960e-01,    6.56507914695225600e-02,    3.06883546371525800e-04,    1.12093851473035640e-03,
                5.14222074642053690e+00,    5.27272636474484460e+00,    -2.54945413762576720e+01,    1.53194959209148300e+00,    2.57414487548601870e+01,    1.40257525040087170e+00,    1.11778227592199600e-01,    6.11685387263086880e-02,    2.93647384737742710e-04,    1.07560815394522340e-03,
                6.24164031831883650e+00,    4.26984108082687540e+00,    -9.33868724419552190e+01,    1.39407746140250150e+00,    9.26332875829884300e+01,    1.35566854910434480e+00,    1.03412692221298720e-01,    5.72667949652199830e-02,    2.81848426894390730e-04,    1.03307954282067370e-03,
                7.37743301813403020e+00,    3.46917757783897770e+00,    -1.26025106931628140e+02,    1.29759810886736600e+00,    1.24128405004095550e+02,    1.26771067646066030e+00,    9.59978371818569760e-02,    5.37771750179423110e-02,    2.71072216398882020e-04,    9.93084577029176810e-04,
                9.64400666272123170e+00,    2.72645545366544080e+00,    -1.22924435350112520e+02,    1.23723425850866020e+00,    1.18682564816567250e+02,    1.20062036872249790e+00,    8.95025947025538950e-02,    5.06678682285199920e-02,    2.61276121490475030e-04,    9.55437883383497270e-04,
                1.55451749674860600e+01,    2.10637340865492680e+00,    -1.18241027856744580e+02,    1.20860376129512240e+00,    1.08009524963196970e+02,    1.15395270567214010e+00,    8.36259341992221660e-02,    4.78189391274824250e-02,    2.51991862429073870e-04,    9.19886257592613110e-04,
                4.28708739181692260e+00,    2.26587870798541500e+01,    3.23250665422964990e+00,    2.23797386470064240e+00,    6.74029533561706250e-01,    3.68995568664316260e-01,    6.18908083387697610e-02,    4.02266575298484350e-02,    2.35612052952190030e-04,    8.83761890878035130e-04,
                6.24475187390461530e+00,    1.51431354190985630e+01,    2.35172271416388460e+00,    1.45379000604814030e+00,    4.74279373222252000e-01,    3.20835646387801770e-01,    6.38113874286849870e-02,    4.04354532094699790e-02,    2.34651280562792400e-04,    8.54081131280032660e-04,
                6.09788179599509660e+00,    1.24288544315854800e+01,    2.19495164736675010e+00,    1.50535992352023460e+00,    5.48172791960022550e-01,    3.33738039717124290e-01,    6.16669573222662570e-02,    3.87744553499998830e-02,    2.26807355864714200e-04,    8.24049884064866980e-04,
                5.79526879647240540e+00,    1.42801055058256010e+01,    2.37022664107843270e+00,    1.35969015719134510e+00,    4.71398756901114880e-01,    3.02017349663514120e-01,    5.74368260587866800e-02,    3.66436798147007710e-02,    2.18979489259659270e-04,    7.95434526518371140e-04,
                5.60406255377525750e+00,    1.39517490230574650e+01,    2.35796259561812920e+00,    1.31239754917439220e+00,    4.76001098572882360e-01,    2.94933701192956530e-01,    5.44123374315247100e-02,    3.48601542462324140e-02,    2.11414602205149750e-04,    7.68261682661809690e-04,
                5.42908391969770320e+00,    1.36503649427659970e+01,    2.33687325360880300e+00,    1.26759841390319910e+00,    4.83373554104881860e-01,    2.88610681576929930e-01,    5.14654964557478970e-02,    3.31291807446609310e-02,    2.03776132863761090e-04,    7.42348483801266290e-04,
                5.26774445089444580e+00,    1.33602096827394550e+01,    2.30855813326304960e+00,    1.22585856586941720e+00,    4.93265479026012750e-01,    2.82919632127866860e-01,    4.86356279741696550e-02,    3.14735397127137930e-02,    1.96308842320675220e-04,    7.17658025069615150e-04,
                5.12680428517077580e+00,    1.31581501026129040e+01,    2.26925534008380580e+00,    1.18129508243337060e+00,    5.04209300453302480e-01,    2.77107038219062910e-01,    4.56923992416221960e-02,    2.97957604549544570e-02,    1.88675050493886220e-04,    6.94011099199098280e-04,
                4.97962359749809200e+00,    1.28392663078033800e+01,    2.24183087455669480e+00,    1.14705446420486030e+00,    5.12933961402893710e-01,    2.70387160935243730e-01,    4.29801848498334440e-02,    2.82418714952601960e-02,    1.81381692485787560e-04,    6.71486603173992420e-04,
                5.07835830045611390e+00,    1.05132725469047320e+01,    1.95744027181658950e+00,    1.11764941281524610e+00,    5.92825983221375140e-01,    2.84386741833675240e-01,    4.19502034143925600e-02,    2.72663327641347110e-02,    1.75241091528316820e-04,    6.50310860707303690e-04,
                4.71161636657300060e+00,    1.23109415948539130e+01,    2.17261950786578910e+00,    1.08743796767492460e+00,    5.39717601342865730e-01,    2.59804965509275510e-01,    3.79796004547811110e-02,    2.53289923895189670e-02,    1.66923763564841650e-04,    6.29278566961911160e-04,
                4.59075504485146620e+00,    1.20656740623369880e+01,    2.13572373036567380e+00,    1.05811737115864360e+00,    5.51355560094152540e-01,    2.53994438918661800e-01,    3.56058406718513800e-02,    2.39508739649649150e-02,    1.59824016856789790e-04,    6.09482748433288060e-04,
                4.48400110626710810e+00,    1.18749250691570630e+01,    2.08904347078539800e+00,    1.02828493708789590e+00,    5.65932618316104640e-01,    2.48907807908075960e-01,    3.32703590211063040e-02,    2.25844065532147840e-02,    1.52445610282892090e-04,    5.90374445159424470e-04,
                4.37665140786963210e+00,    1.16653080717139480e+01,    2.04645150383634090e+00,    1.00314769675495310e+00,    5.80662860591587670e-01,    2.44153292686312390e-01,    3.12388528327766720e-02,    2.13618580000731020e-02,    1.45374869662535650e-04,    5.72110338454766620e-04,
                4.28308318247419530e+00,    1.14961905956683400e+01,    1.99538001453730710e+00,    9.77039102018820600e-01,    5.97053571332504250e-01,    2.39429132975829070e-01,    2.90951668869559870e-02,    2.00912233327255780e-02,    1.38064769037521620e-04,    5.54377138492266260e-04,
                4.19563840737123250e+00,    1.14107750456652330e+01,    1.94333285978645610e+00,    9.49011924454877360e-01,    6.12446617285465790e-01,    2.34950326535304650e-01,    2.71515207694932420e-02,    1.89051576280975480e-02,    1.30594787351929680e-04,    5.37233649209711080e-04,
                4.35692593296384260e+00,    9.29434514718568930e+00,    1.69589204777315850e+00,    9.10500045957419960e-01,    6.63904520068470450e-01,    2.38746595911376420e-01,    2.63020018760281370e-02,    1.82098542546462290e-02,    1.25497318499823790e-04,    5.21559371963562160e-04,
                4.33138405664923450e+00,    7.87684433810288360e+00,    1.52764864728680740e+00,    9.42515642627748780e-01,    7.35795922891237960e-01,    2.41699480039806010e-01,    2.49526323201402640e-02,    1.72899894448508980e-02,    1.18740852581057760e-04,    5.05834631313525580e-04,
                4.19726001319641990e+00,    6.93674024894457200e+00,    1.46854806774708810e+00,    1.01725276618348250e+00,    7.83931248211088170e-01,    2.38948939715070610e-01,    2.32494094864395090e-02,    1.62332433075381040e-02,    1.11261358607285950e-04,    4.90239004021149030e-04,
                3.97629715819077400e+00,    6.29685779228774930e+00,    1.52292684257341810e+00,    1.11289951157691090e+00,    7.97706246390561310e-01,    2.31057040678473440e-01,    2.13666741558685220e-02,    1.51013545567204450e-02,    1.03078689385717270e-04,    4.74682477105025770e-04,
                3.75144381439811880e+00,    5.79754636082953830e+00,    1.62768802977632740e+00,    1.18223631077710680e+00,    7.81756755454271810e-01,    2.19913586024770210e-01,    1.95170803912291560e-02,    1.39810455481456640e-02,    9.43199804293427490e-05,    4.59127125829838610e-04,
                3.48401517338711560e+00,    5.43998846080953680e+00,    1.79377920416965450e+00,    1.22792134140128130e+00,    7.44878356691920260e-01,    2.06208856992909220e-01,    1.75427785162434460e-02,    1.27899401721146020e-02,    8.44872351568859950e-05,    4.43032226787478600e-04,
                1.59956578198844190e+00,    5.79244447385567530e+00,    2.97534452194120510e+00,    1.55300982973225970e+00,    6.95092678366882160e-01,    1.88626335936648240e-01,    1.48779627458687970e-02,    1.11763470662453270e-02,    6.90549579101583330e-05,    4.22772361655551400e-04,
                2.04021563975728260e+00,    6.65819429609627460e+00,    2.89922634624825460e+00,    1.41337923778932420e+00,    6.36344083815797660e-01,    1.74000104502178950e-01,    1.32071919595408320e-02,    1.00687804530210510e-02,    5.67382192500131220e-05,    4.03077105692223100e-04,
                1.67593467064870840e+00,    5.52231093211402510e+00,    3.00486602969729290e+00,    1.38007223007196280e+00,    5.95340013161635540e-01,    1.62229237655945410e-01,    1.17163186623094810e-02,    9.01814890416575630e-03,    4.29678297639817100e-05,    3.79277667477667070e-04,
                2.23522850443105270e+00,    5.02030988960240340e+00,    2.68276638651994890e+00,    1.23077590583777650e+00,    5.55194926212433270e-01,    1.52248122992863640e-01,    1.07273354366258700e-02,    8.28399116906210380e-03,    3.28473992046262910e-05,    3.56241938931758870e-04,
                2.80342737412509990e+00,    6.55876872804534190e+00,    2.71882787966020030e+00,    1.16972422516667860e+00,    5.22475915391999560e-01,    1.43556691800178100e-01,    9.84537836971042040e-03,    7.61976526230039810e-03,    2.34524526508316210e-05,    3.29627673902985420e-04,
                3.60861020997771350e+00,    6.58162594621962780e+00,    2.45056774737198340e+00,    1.02772852660588470e+00,    4.78639500107256980e-01,    1.33533680634720870e-01,    8.87214235169215240e-03,    6.84861238948429770e-03,    1.04001932909467290e-05,    2.76388875456666010e-04,
                4.24209901057315890e+00,    5.75280115536079960e+00,    2.09994342055827850e+00,    8.73901489195461510e-01,    4.32836631379922900e-01,    1.23599956180524660e-01,    8.02021570381059210e-03,    6.17600333058570230e-03,    7.21785030851340250e-07,    1.41495177617230900e-04,
                4.63620095668962320e+00,    4.88825299780982900e+00,    1.78063311426987080e+00,    7.56310526880074720e-01,    4.03730443952738490e-01,    1.17302364452249240e-01,    7.68539554668673950e-03,    5.93034394242894160e-03,    8.95415902807643600e-08,    7.66668663873028710e-05,
                4.96592250595070530e+00,    4.09129378787496290e+00,    1.43815561507033650e+00,    6.29228996602551270e-01,    3.71299200579298050e-01,    1.11096678695535160e-01,    7.47256428450201060e-03,    5.77235010347761780e-03,    1.14115284152585070e-07,    8.08511893879382500e-05,
                5.30615614475033230e+00,    3.48800735481655670e+00,    1.11733160236072120e+00,    4.81190741149771170e-01,    3.15858723110854330e-01,    1.01874467945753100e-01,    7.20342242310210040e-03,    5.59245374417078650e-03,    1.07355330545863460e-07,    7.79506673540736650e-05,
                4.52053399042335970e+00,    1.94482234232948810e+01,    4.10695397909124620e+00,    1.89824673155996850e+00,    7.13946878503728510e-01,    1.69553563595341790e-01,    1.69294027687453900e-02,    1.14819567548934220e-02,    8.57492129191724410e-05,    3.46122038257982700e-04,
                6.52401072001873320e+00,    1.40092554298974860e+01,    3.20787080745661290e+00,    1.32635035961665260e+00,    5.40478774349637650e-01,    1.31408568386036120e-01,    8.78278806898853160e-03,    6.28647434520409560e-03,    6.91010602949131460e-06,    2.27839981458950950e-04,
                6.89602853559619080e+00,    1.10763825670398680e+01,    2.83514154536523220e+00,    1.17132616290503000e+00,    5.03506881888815090e-01,    1.23494651391799910e-01,    8.02294510966706890e-03,    5.73515595790497110e-03,    9.20400954758739720e-08,    7.19707541802523240e-05,
                7.09374900162630160e+00,    9.09473795165944670e+00,    2.52912373903193990e+00,    1.06391667033161210e+00,    4.82107819888889010e-01,    1.18619446621877890e-01,    7.71936674145110980e-03,    5.53945708895034650e-03,    7.27114199425041410e-08,    6.58494730528462700e-05,
                6.43401324797284160e+00,    1.02596851307297850e+01,    2.97099970535788760e+00,    1.13177452306163300e+00,    4.60796651787848010e-01,    1.12775935362382300e-01,    7.24033125775455300e-03,    5.27459583353132120e-03,    6.36236664309127860e-08,    6.19263824088759710e-05,
                6.21070826784019920e+00,    1.00214105859162840e+01,    3.03934453825623450e+00,    1.10399880155883360e+00,    4.37339984439162780e-01,    1.07218973162453880e-01,    6.80714764147316580e-03,    5.02432130850682420e-03,    6.18229327742851270e-08,    6.00506994197195790e-05,
                6.00431598308986470e+00,    9.81793046719106140e+00,    3.09431654531417970e+00,    1.06978705068029440e+00,    4.12808487716417040e-01,    1.01635291448645790e-01,    6.40891657880066860e-03,    4.79524846888725040e-03,    6.73007376216075430e-08,    6.02806598726462900e-05,
                5.20061716810304200e+00,    1.12038310194406670e+01,    3.49849440367144030e+00,    1.12846369546928190e+00,    4.05414931131320270e-01,    9.89333472686131640e-02,    6.22343700826529910e-03,    4.65917431977950700e-03,    6.00859329543440850e-08,    5.72590638962334120e-05,
                5.02533860036029090e+00,    1.09772190697628730e+01,    3.51843988285154060e+00,    1.08477214832630780e+00,    3.81950349446272210e-01,    9.36746874853835870e-02,    5.82110208096211020e-03,    4.42682346873485640e-03,    6.52609338829711920e-08,    5.73856837050511520e-05,
                5.34656100260619650e+00,    9.23118379752449410e+00,    3.22468466560910820e+00,    9.72836229193835170e-01,    3.49461752625445210e-01,    8.70596220966562280e-02,    5.29251756748815110e-03,    4.13011964465032340e-03,    6.15917630236237360e-08,    5.49463894449675660e-05,
                5.22582350334004710e+00,    9.07135706618718270e+00,    3.22818873995295300e+00,    9.31124277456634840e-01,    3.27098878823851360e-01,    8.20720602059845510e-02,    4.88882575592239010e-03,    3.89029655993416560e-03,    5.21272269419363250e-08,    5.10367976636641620e-05,
                4.58641247753547890e+00,    1.03186102092335170e+01,    3.51869595665101230e+00,    9.57278837829232840e-01,    3.19261714201205420e-01,    7.96807431443880690e-02,    4.72979647985625770e-03,    3.77193199996848920e-03,    5.51324480806204080e-08,    5.09750860376011080e-05,
                4.45799480675412600e+00,    1.00890693383401260e+01,    3.50867212637662320e+00,    9.19446447361622620e-01,    3.01375380528315420e-01,    7.56419177786329250e-02,    4.40763746214481880e-03,    3.57026465124809290e-03,    4.88787903228591640e-08,    4.80495174395811320e-05,
                4.33897576401170860e+00,    9.96330937223836170e+00,    3.49185098896403410e+00,    8.78083956982974370e-01,    2.81471099016286750e-01,    7.11637115768777580e-02,    4.00209271499046060e-03,    3.32152404215077700e-03,    5.52929808195514040e-08,    4.85103179460372770e-05,
                4.22729470403101180e+00,    9.72400602040031360e+00,    3.47249227510661560e+00,    8.42873775960210400e-01,    2.64822229496898600e-01,    6.73534743974851110e-02,    3.69072877833192920e-03,    3.12364606263320840e-03,    6.25871426200247310e-08,    4.91217097017619240e-05,
                4.10951702443020390e+00,    9.67735994510120180e+00,    3.45799132522750740e+00,    8.06940042470817190e-01,    2.47087351222386680e-01,    6.32815436954167060e-02,    3.30423920940995170e-03,    2.87544639641209180e-03,    5.99104926231931580e-08,    4.70679153697598100e-05,
                4.52147421198378830e+00,    8.28309906861142050e+00,    3.20212985587804380e+00,    7.31918958125393870e-01,    2.23028726956451650e-01,    5.80942773018654980e-02,    2.81716453892029730e-03,    2.56168016047444900e-03,    4.06427954038620530e-08,    4.03816515529006540e-05]).reshape((103,10))

def Xray_scattering_factor(Z,gsq,units = 'A'):
    #Bohr radius in Angstrom
    a0=0.529177
    # gsq = g**2
    return Z - 2*np.pi**2*a0*gsq*electron_scattering_factor(Z,gsq,units=units)

def electron_scattering_factor(Z,gsq,units = 'VA'):
    ai = e_scattering_factors[Z-1,0:10:2]
    bi = e_scattering_factors[Z-1,1:10:2]
    # gsq = g**2
    #Planck's constant in kg Angstrom/s
    h= 6.62607004e-24
    #Electron rest mass in kg
    me = 9.10938356e-31
    #Electron charge in Coulomb
    qe = 1.60217662e-19
    
    fe = np.zeros_like(gsq)
    
    for i in range(5):
        fe +=ai[i]*(2+bi[i]*gsq)/(1+bi[i]*gsq)**2

    # Result can be returned in units of Volt Angstrom ('VA') or Angstrom ('A')
    if units=='VA': return h**2/(2*np.pi*me*qe)*fe
    elif units == 'A' : return fe

def interaction_constant(E,units = 'rad/VA'):
    """Calculates the interaction constant, sigma, to convert electrostatic
    potential (in V Angstrom) to radians. Units of this constant are rad/(V
    Angstrom).  See Eq. (2.5) in Kirkland's Advanced Computing in electron
    microscopy """
    #Planck's constant in kg Angstrom /s
    h= 6.62607004e-24
    #Electron rest mass in kg
    me = 9.10938356e-31
    #Electron charge in Coulomb
    qe = 1.60217662e-19
    #Electron wave number (reciprocal of wavelength) in Angstrom
    k0 = wavev(E)
    #Relativistic electron mass correction
    gamma = relativistic_mass_correction(E)
    if units == 'rad/VA': return 2*np.pi*gamma*me*qe/k0/h/h
    elif units == 'rad/A': return gamma/k0

class crystal:
    #Elements in a crystal object:
    #unitcell - An array containing the side lengths of the orthorhombic unit cell
    #atomtypes - A string array containing the symbols of atomic elements in the cell
    #natoms - Total number of atoms of each element within the cell
    #atoms - An array of dimensions total number of atoms by 6 which for each atom
    #        contains the fractional cooordinates within the unit cell for each atom
    #        in the first three entries, the atomic number in the fourth entry,
    #        the atomic occupancy (not yet implemented in the multislice) in the
    #        fifth entry and mean squared atomic displacement in the sixth entry
    #
    def __init__(self,fnam,temperature_factor_units='urms'):
        """Initializes a crystal object by reading in a *.p1 file, which is
        outputted by the vesta software:

        K. Momma and F. Izumi, "VESTA 3 for three-dimensional visualization of
        crystal, volumetric and morphology data," J. Appl. Crystallogr., 44,
        1272-1276 (2011).
        """
        f = open(fnam,'r')
        #Read title
        self.Title = f.readline().strip()

        #I have no idea what the second line in the p1 file format means
        #so ignore it
        f.readline()

        #Get unit cell vector - WARNING assume an orthorhombic unit cell
        self.unitcell = np.diag(np.loadtxt(f,max_rows=3,dtype=np.float))

        #Get the atomic symbol of each element
        self.atomtypes = np.loadtxt(f,max_rows=1,dtype=str,ndmin=1)

        #Get atomic number from lookup table
        Zs = [symbol.index(self.atomtypes[i].strip())
                       for i in range(self.atomtypes.shape[0])]

        #Get the number of atoms of each type
        self.natoms = np.loadtxt(f,max_rows=1,dtype=int,ndmin=1)

        #Skip empty line
        f.readline()
        
        #total number of atoms 
        totnatoms = np.sum(self.natoms)
        #Intialize array containing atomic information
        self.atoms = np.zeros((totnatoms,6))
        
        for i in range(totnatoms):
            atominfo = re.split(r'\s+',f.readline().strip())[:6]
            self.atoms[i,:3] = np.asarray(atominfo[:3],dtype=np.float)
            self.atoms[i,3]  = symbol.index(re.match('([A-Za-z]+)',
                                           atominfo[3]).group(0))
            self.atoms[i,4:6] = np.asarray(atominfo[4:6],dtype=np.float)
        
        #If temperature factors are given as B then convert to urms
        if(temperature_factor_units=='B'): self.atoms[:,4:6] /= 8*np.pi**2

    def quickplot(self,atomscale=0.01,cmap = plt.get_cmap('Dark2')):
        """Makes a quick 3D scatter plot of the crystal"""
        from mpl_toolkits.mplot3d import Axes3D
        fig = plt.figure()
        ax = fig.add_subplot(111,projection='3d')
        colors = cmap(self.atoms[:,3]/np.amax(self.atoms[:,3]))
        sizes = self.atoms[:,3]**(4)*atomscale
        ax.scatter(*[self.atoms[:,i] for i in range(3)],c=colors,s=sizes)       
        plt.show(block=True)

    def make_transmission_functions(self,pixels,eV,subslices=[1.0]
                                ,tiling=[1,1],fe=None,displacements=True,
                                fftout=True,device=None):
        """Make the transmission functions for this crystal, which are the
           """
        from torch_utils import torch_c_exp
        T = self.make_potential(pixels,subslices,tiling,fe=fe, 
                                displacements= displacements,device=device)
        T = torch.fft(torch_c_exp(interaction_constant(eV)*T),signal_ndim=2)
        
        for i in range(T.shape[0]):
            T[i,...] = bandwidth_limit_array(T[i,...])
            
        if fftout: return torch.ifft(T,signal_ndim=2)
        return T

    def calculate_scattering_factors(self,pixels,tiling = [1,1]):
        """Calculates the electron scattering factors on a reciprocal space
           grid of pixel size pixels assuming a unit cell tiling given by 
           tiling"""
        # Get real space and pixel dimensions of the array as numpy arrays
        rsize = np.asarray(self.unitcell[:2])*np.asarray(tiling[:2])
        psize = np.asarray(pixels)
        
        # Get reciprocal space array
        g = q_space_array(psize, rsize)
        gsq = np.square(g[0]) + np.square(g[1])
        
        # Get a list of unique atomic elements
        elements = list(set(np.asarray(self.atoms[:, 3], dtype=np.int)))

        # Initialise scattering factor array
        fe = np.zeros((len(elements), *pixels), dtype=np.float32)

        #Loop over unique elements
        for ielement, element in enumerate(elements):
            fe[ielement, :, :] = electron_scattering_factor(element, gsq)
        
        return fe

    def make_potential(self,pixels,subslices=[1.0],tiling=[1,1],
                    bandwidth_limit=True,displacements= True,fe=None,
                    device = None):
        """"Calculates the projected electrostatic potential for a 
            crystal on a pixel grid with dimensions specified by array 
            pixels. Subslicing the unit cell is achieved by passing an 
            array subslices that contains as its entries the depths at 
            which each subslice should be terminated in units of 
            fractional coordinates. Tiling of the unit cell (often
            necessary to make a sufficiently large simulation grid to 
            fit the probe) is achieved by passing the tiling factors in 
            the array tiling.
            """

        # Initialize device cuda if available, CPU if no cuda is available
        if device is None:
            if (torch.cuda.is_available()):
                device = torch.device('cuda:0')
            else:
                device = torch.device('cpu')
            
        tiling_ = np.asarray(tiling[:2])
        gsize = np.asarray(self.unitcell[:2])*tiling_
        psize = np.asarray(pixels)

        pixperA = np.asarray(pixels)/np.asarray(self.unitcell[:2])/tiling_

        #Get a list of unique atomic elements
        elements = list(set(np.asarray(self.atoms[:,3],dtype=np.int)))
        
        #Get number of unique atomic elements
        nelements = len(elements)
        nsubslices = len(subslices)

        #FDES method
        #Intialize potential array
        P = torch.zeros(np.prod([nelements,nsubslices,*pixels,2]),
                        device=device,dtype = torch.float)
        
        #Construct a map of which atom corresponds to which slice
        islice = np.zeros((self.atoms.shape[0]),dtype=np.int)
        slice_stride = np.prod(pixels)*2
        if(nsubslices>1):
            #Finds which slice atom can be found in
            #WARNING Assumes that the slices list ends with 1.0 and is in
            #ascending order
            for i in range(nsubslices):
                zmin = 0 if i==0 else subslices[i-1]
                atoms_in_slice = (self.atoms[:,2]%1.0>=zmin) & \
                                 (self.atoms[:,2]%1.0< subslices[i  ])
                islice[atoms_in_slice] = i*slice_stride
            islice = torch.from_numpy(islice).type(torch.long).to(device)
        else:
            islice = 0
        #Make map a pytorch Tensor

        #Construct a map of which atom corresponds to which element
        element_stride = nsubslices*slice_stride
        ielement = torch.tensor([elements.index(int(self.atoms[iatom,3]))
                            for iatom in range(self.atoms.shape[0])],
                            dtype=torch.long,device=device)*element_stride
        
        if displacements:
            urms = torch.tensor(np.sqrt(self.atoms[:,5])[:,np.newaxis]
                             *pixperA[np.newaxis,:],dtype=P.dtype
                             ,device=device).view(self.atoms.shape[0],2)
            
            
        # FDES algorithm implemented using the pytorch scatter_add function, 
        # which takes a list of numbers and adds them to a corresponding list 
        # of coordinates
        for tile in range(tiling[0]*tiling[1]):
            # For these atomic coordinates (in fractional coordinates) convert 
            # to pixel coordinates
            posn = (self.atoms[:,:2]+np.asarray([tile%tiling[0],
                     tile//tiling[0]])[np.newaxis,:])/tiling_*psize
            posn = torch.from_numpy(posn).to(device).type(P.dtype)

            if displacements:
                # Add displacement sampled from normal distribution to account
                # for atomic thermal motion
                disp = torch.randn(self.atoms.shape[0],2,dtype=P.dtype,
                                                        device=device)*urms
                       
                # print(disp)
                posn[:,:2] += disp
            
            yc = torch.remainder(torch.ceil (posn[:,0]).type(torch.long)
                                                        ,pixels[0])*pixels[1]*2
            yf = torch.remainder(torch.floor(posn[:,0]).type(torch.long)
                                                        ,pixels[0])*pixels[1]*2
            xc = torch.remainder(torch.ceil (posn[:,1]).type(torch.long)
                                                        ,pixels[1])*2
            xf = torch.remainder(torch.floor(posn[:,1]).type(torch.long)
                                                        ,pixels[1])*2
            
            yh = torch.remainder(posn[:,0],1.0)
            yl = 1.0 - yh
            xh = torch.remainder(posn[:,1],1.0)
            xl = 1.0 - xh
            
            #Each pixel is set to the overlap of a shifted rectangle in that pixel
            P.scatter_add_(0,ielement+islice+yc+xc,yh*xh)
            P.scatter_add_(0,ielement+islice+yc+xf,yh*xl)
            P.scatter_add_(0,ielement+islice+yf+xc,yl*xh)
            P.scatter_add_(0,ielement+islice+yf+xf,yl*xl)

        #Now view potential as a 4D array for next bit
        P = P.view(nelements,nsubslices,*pixels,2)
        
        # plt.show(plt.imshow(np.abs(utils.cx_to_numpy(P[0,0,...]))))
        #FFT potential to reciprocal space
        P = torch.fft(P,signal_ndim=2)


        #Make sinc functions with appropriate singleton dimensions for pytorch
        #broadcasting /gridsize[0]*pixels[0] /gridsize[1]*pixels[1]
        sincy = utils.sinc(torch.from_numpy(np.fft.fftfreq(pixels[0]))) \
                                 .view([1,1,pixels[0],1,1]).to(device)  \
                                 .type(P.dtype)
        sincx = utils.sinc(torch.from_numpy(np.fft.fftfreq(pixels[1]))) \
                                 .view([1,1,1,pixels[1],1]).to(device)  \
                                  .type(P.dtype)
        # #Divide by sinc functions
        P /= sincy
        P /= sincx

        #Option to precalculate scattering factors and pass to program which
        #saves computation for
        if(fe is None):
            fe_ = self.calculate_scattering_factors(pixels,tiling)
        else:
            fe_=fe
        
        #Convolve with electron scattering factors using Fourier
        #convolution theorem
        # P = torch.ones(nelements,1,*pixels,2,device=device)
        P *= torch.from_numpy(fe_).view(nelements,1,*pixels,1).to(device)
        
        
        #Add atoms together
        P = torch.sum(P,dim=0)/np.prod(self.unitcell[:2]) \
                        /np.prod(tiling)*np.prod(pixels)
        
        #Only return real part
        return torch.ifft(P,signal_ndim=2)[...,0]

def q_space_array(pixels,gridsize):
    '''Returns the appropriately scaled 2D reciprocal space array for pixel size
    given by pixels (#y pixels, #x pixels) and real space size given by gridsize
    (y size, x size)'''
    return np.meshgrid(*[np.fft.fftfreq(pixels[i],d=gridsize[i]/pixels[i]) for i
                        in [1,0]])

def aberration(q,lam,df=0,cs=0,c5=0):
    '''calculates the aberration function chi as a function of
    reciprocal space extent q for an electron with wavelength lam.

    Parameters
    ----------
    q : number
        reciprocal space extent (Inverse angstroms).
    lam : number
        wavelength of electron (Inverse angstroms).
    df : number
        Probe defocus (angstroms).
    cs : number
        Probe spherical aberration (mm).
    c5 : number
        Probe c5 coefficient (mm).'''
    p = lam*q
    chi =  df*np.square(p)/2.0 + cs*1e7*np.power(p,4)/4.0
    chi += c5*1e7*np.power(p,6)/6.0
    return 2*np.pi*chi/lam

def construct_illum(pix_dim,real_dim,eV,app,beam_tilt=[0,0],aperture_shift=[0,0],
    df=0,cs=0,c5=0,q=None,app_units = 'mrad',qspace = False,normalized=True):
    '''Makes a probe wave function with pixel dimensions given in pix_dim
    and real_dimensions given by real_dim
    ---------
    pix_dim --- The pixel size of the grid
    real_dim --- The size of the grid in Angstrom
    keV --- The energy of the probe electrons in keVnews
    app --- The apperture in units specified by app_units
    df --- Probe defocus in A, a negative value indicate overfocus
    cs --- The 3rd order spherical aberration coefficient
    c5 --- The 5rd order spherical aberration coefficient
    app_units --- The units of the aperture size (A^-1 or mrad)'''


    npiy,npix = pix_dim[:2]
    y,x = real_dim[:2]
    if(q==None): q = q_space_array(pix_dim,real_dim[:2])
    k = wavev(eV)

    if app_units == 'mrad': app_ = np.tan(app/1000.0)*k
    else: app_= app

    probe = np.zeros(pix_dim,dtype=np.complex)

    qarray1 = np.sqrt(np.square(q[0]-beam_tilt[0])+np.square(q[1]-beam_tilt[1]))
    qarray2 = np.sqrt(np.square(q[0]-beam_tilt[0]-aperture_shift[0])
    +np.square(q[1]-beam_tilt[1]-aperture_shift[1]))
    probe[qarray2<app_] = np.exp(-1j*aberration(qarray1[qarray2<app_],1.0/k,df,cs,c5))
    if(normalized):probe /= np.sqrt(np.sum(np.square(np.abs(probe))))

    #Return real or diffraction space probe depending on user preference
    if(qspace): return probe
    else:   return np.fft.ifft2(probe,norm='ortho')

def wavev(E):
    """Calculates the relativistically corrected wavenumber k0 (reciprocal of
    the wavelength) for an electron of energy eV. See Eq. (2.5) in Kirkland's
    Advanced Computing in electron microscopy"""
    #Planck's constant times speed of light in eV Angstrom
    hc = 1.23984193e4
    #Electron rest mass in eV
    m0c2 = 5.109989461e5
    return np.sqrt( E*(E+ 2*m0c2 )) / hc


def relativistic_mass_correction(E):
    """Gives the relativistic mass correction, m/m0 or gamma, for an electron
    with kinetic energy given by E in eV. Eq. (2.2) in Kirkland's Advanced
     Computing in electron microscopy"""
    #Electron rest mass in eV
    m0c2 = 5.109989461e5
    return (m0c2 + E)/m0c2


def bandwidth_limit_array(array,limit=2/3):
    '''Band-width limit an array to fraction of its maximum given by limit'''
    if (isinstance(array,np.ndarray)):
        pixelsize = array.shape[:2]
        array[(np.square(np.fft.fftfreq(pixelsize[0]))[:,np.newaxis]+
               np.square(np.fft.fftfreq(pixelsize[1]))[np.newaxis,:]
               )*(2/limit)**2 > 1 ] = 0
    else:
        pixelsize = array.size()[:2]
        array[(torch.from_numpy(np.fft.fftfreq(pixelsize[0])**2)
                                           .view(pixelsize[0],1)+
              torch.from_numpy(np.fft.fftfreq(pixelsize[1])**2)
                                           .view(1,pixelsize[1]))
                                           *(2/limit)**2 > 1 ] = 0
               
    return array

def make_propagators(pixelsize,gridsize,eV,subslices):
    #We will use the construct_illum function to generate the propagator, the
    #aperture of this propagator will supply the bandwidth limit of our simulation
    #it must be 2/3rds of our pixel gridsize
    app = np.amax(np.asarray(pixelsize)/np.asarray(gridsize[:2])/2)

    #Intitialize array
    prop = np.zeros((len(subslices),*pixelsize),dtype=np.complex)
    for islice,slice in enumerate(subslices):
        if(islice==0): deltaz = slice*gridsize[2]
        else: deltaz = (slice-subslices[islice-1])*gridsize[2]
        
        #Calculate propagator
        prop[islice,:,:] = bandwidth_limit_array(construct_illum(pixelsize
                                            ,gridsize[:2],eV,app,df=deltaz,
                                              app_units = 'invA',qspace = True,
                                              normalized=False))
    
    return prop

def multislice(probes,propagators,transmission_functions,nslices
              ,tiling=None,device_type=None,seed=None):
    """For a given probe or set of probes, propagators, and transmission 
        functions perform the multislice algorithm for nslices iterations."""
    from torch_utils import complex_mul,cx_from_numpy,cx_to_numpy
    
    #Seed random number generator, if None then the system clock will
    #be used as a seed
    r = np.random.RandomState(seed)
    
    #Initialize device cuda if available, CPU if no cuda is available
    if(device_type is None and torch.cuda.is_available()):
        device = torch.device('cuda')
    elif(device_type is None):
        device = torch.device('cpu')
    else:
        device = torch.device(device_type)


    #Since pytorch doesn't have a complex data type we need to add an extra
    #dimension of size 2 to each tensor that will store real and imaginary
    #components.
    if(not isinstance(transmission_functions,torch.Tensor)):
        T = cx_from_numpy(transmission_functions,device=device)
    else:
        T = transmission_functions
    if(not isinstance(propagators,torch.Tensor)):    
        P = cx_from_numpy(propagators,device=device)
    else:
        P = propagators
    if(not isinstance(probes,torch.Tensor)):
        psi = cx_from_numpy(probes,device=device)
    else:
        psi = probes
    
    nT,nsubslices,nopiy,nopix = T.size()[:4]
    
    for slice in range(nslices):
        for subslice in range(nsubslices):
            #Pick random phase grating
            it = r.randint(0,nT)
            
            # Transmit and forward Fourier transform
            
            if(tiling is None or (tiling[0] == 1 & tiling[1] ==1)):
                psi = torch.fft(complex_mul(T[it,subslice,...],psi),signal_ndim=2)
                # If the transmission function is from a tiled unit cell then 
                # there is the option of randomly shifting it around to 
                # generate "more" transmission functions
            elif(nopiy%tiling[0]==0 and nopix%tiling[1]==0):
                #Shift an integer number of pixels in y
                T_ = utils.roll_n(T[it,subslice,...],0,
                             r.randint(0,tiling[0])*(nopiy//tiling[0]))
                             
                #Shift an integer number of pixels in x             
                T_ = utils.roll_n(T_                ,1,
                             r.randint(1,tiling[1])*(nopix//tiling[1]))
                
                #Perform transmission operation
                psi = torch.fft(complex_mul(T_,psi),signal_ndim=2)
            else:
                # Case of a non-integer shifting of the unit cell
                yshift = r.randint(0,tiling[0])*(nopiy/tiling[0])
                xshift = r.randint(0,tiling[1])*(nopix/tiling[1])
                shift = torch.tensor([yshift,xshift])
                
                # Generate an array to perform Fourier shift of transmission
                # function
                FFT_shift_array = utils.fourier_shift_array([nopiy,nopix],shift)
                
                # Apply Fourier shift theorem for sub-pixel shift
                T_ =torch.ifft(utils.complex_mul(FFT_shift_array
                                ,torch.fft(T[it,subslice,...],signal_ndim=2))
                                                             ,signal_ndim=2)
                
                # Perform transmission operation
                psi = torch.fft(complex_mul(T_,psi),signal_ndim=2)
                
            #Propagate and inverse Fourier transform
            psi =  torch.ifft(complex_mul(psi,P[subslice,...]),signal_ndim=2)
            
    return cx_to_numpy(psi)

def unit_cell_shift(array,axis,shift,tiles):
    """For an array consisting of a number of repeat units given by tiles
       shift than array an integer number of unit cells"""
    
    intshift =array.size(axis)//tiles
    integer_divisible =  intshift == 0 
    
    indices = torch.remainder(torch.arange(array.shape[-3+axis]) - shift)
    if(axis==0): return array[indices,:,:]
    if(axis==1): return array[:,indices,  :]
    
def colorize(z,ccc=None,max= None,min = None,gamma = 1):
    from colorsys import hls_to_rgb
    n,m = z.shape
    c = np.zeros((n,m,3))
    c[np.isinf(z)] = (1.0, 1.0, 1.0)
    c[np.isnan(z)] = (0.5, 0.5, 0.5)

    idx = ~(np.isinf(z) + np.isnan(z))
    A = (np.angle(z[idx])) / (2*np.pi)
    A = (A) % 1.0
    B = np.ones_like(A)
    if(min is None):
        min_ = (np.abs(z)**gamma).min()
    else:
        min_ = min
    if(max is None):
        max_ = (np.abs(z)**gamma).max()
    else:
        max_ = np.abs(max)**gamma
    if (ccc is None):
        range = (max_-min_)
        if(range<1e-10):
            C = np.ones(z.shape)[idx]*0.49
        else:
            C = (np.abs(z[idx])-min_)**gamma/range*0.5
    else:multislice
    C = ccc
    # C = np.ones_like(B)*0.5
    c[idx] = [hls_to_rgb(a, cc,b) for a,b,cc in zip(A,B,C)]
    return c

if __name__ == "__main__":
    sample = crystal('1000048.p1')
    sample.quickplot()
    sys.exit()
    from matplotlib import rc
    rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})

    # sample = crystal('1005012.p1')
    sample = crystal('SrTiO3.p1')
    # sample.atoms[:,5] = 0.05
    # subslices  = [0.132,0.196,0.236,0.362,0.4999,0.6378,0.7233,0.8,0.867,1.0]
    subslices = [1.0]
    gridsize = np.zeros((3))
    gridsize[:3] =sample.unitcell[:3]
    nT = 4
    tiling = [16,16]
    pixsize = [512,512]
    # pixsize = [128,128]
    eV = 300e3
    app = 24.0

    print('Setting up calculation')
    T = torch.zeros(nT,len(subslices),*pixsize,2,dtype=torch.float)
    fe = sample.calculate_scattering_factors(pixsize,tiling)
    for i in range(nT):
        
        T[i,:,:,:] = sample.make_transmission_functions(pixsize,eV,subslices,
                                                tiling,fe=fe,displacements=True)
        

    fig = plt.figure(figsize=(2*4,3*4))

    from torch_utils import cx_to_numpy
    ax = fig.add_subplot(321)
    ax.imshow(np.angle(cx_to_numpy(T[1,0,:,:])))
    ax = fig.add_subplot(322)
    ax.imshow(np.angle(cx_to_numpy(T[1,0,:,:])))
    # for i in range(1): Image.fromarray(np.abs(np.fft.fft2(cx_to_numpy(T[1,i,:,:])))).save('T_{0}.tif'.format(i))
    # plt.show()
    # sys.exit()
    gridsize[:2] = gridsize[:2]*np.asarray(tiling)
    P = make_propagators(pixsize,gridsize,eV,subslices)
    ax = fig.add_subplot(323)
    ax.imshow(np.fft.fftshift(np.imag(P[0,:,:])))
    ax = fig.add_subplot(324)
    ax.imshow(np.fft.fftshift(np.real(P[0,:,:])))
    probe =  construct_illum(pixsize,gridsize[:2],eV,app)
    # probe =  np.ones(pixsize,dtype=np.complex)/np.sqrt(np.prod(pixsize))
    # print(np.sum(np.square(np.abs(probe))))
    ax = fig.add_subplot(325)
    # ax.imshow(colorize(probe))
    ax.imshow(np.square(np.abs(probe)))
    # print(np.argmax(np.square(np.abs(probe))))
    # sys.exit()
    # print(np.sum(np.square(np.abs(probe))))
    # plt.show()
    # print('Performing multislice')
    exit_wave = np.zeros(pixsize)
    from tqdm import tqdm
    from PIL import Image
    nfph = 50
    t = 100
    # Image.fromarray(exit_wave).save('cbed.tiff')
    for i in tqdm(range(nfph)):

        exit_wave += np.abs(np.fft.fft2(multislice(probe,P,T,gridsize,int(np.ceil(t/3.905)),tiling=tiling)))**2/nfph
        # fig,ax = plt.subplots()
        # ax.imshow(exit_wave)
        # plt.show()
    Image.fromarray(np.fft.fftshift(exit_wave)/np.prod(pixsize)).save('cbed.tiff')
    ax = fig.add_subplot(326)
    # ax.imshow(np.fft.fftshift(np.square(np.abs((np.fft.fft2(exit_wave,norm='ortho'))))))
    plt.show()
